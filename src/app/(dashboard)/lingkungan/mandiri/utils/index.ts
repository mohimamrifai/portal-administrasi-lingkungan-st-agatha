import { format, subDays } from "date-fns";
import { toast } from "sonner";
import { DanaMandiriTransaction, DanaMandiriArrears, FamilyHead, familyHeads } from "../types";

// Generate mock transactions
export function generateTransactions(): DanaMandiriTransaction[] {
  const currentYear = new Date().getFullYear();
  
  return [
    {
      id: 1,
      familyHeadId: 1,
      year: currentYear,
      amount: 1000000,
      status: "paid",
      paymentDate: new Date(currentYear, 1, 15),
      isLocked: true,
      notes: "Pembayaran penuh",
      paymentStatus: "Lunas",
    },
    {
      id: 2,
      familyHeadId: 2,
      year: currentYear,
      amount: 1000000,
      status: "paid",
      paymentDate: new Date(currentYear, 2, 10),
      isLocked: true,
      notes: "Pembayaran penuh",
      paymentStatus: "Lunas",
    },
    {
      id: 3,
      familyHeadId: 3,
      year: currentYear,
      amount: 1000000,
      status: "paid",
      paymentDate: new Date(currentYear, 3, 5),
      isLocked: false,
      notes: "Pembayaran penuh",
      paymentStatus: "Lunas",
    },
    {
      id: 4,
      familyHeadId: 4,
      year: currentYear,
      amount: 1000000,
      status: "submitted",
      paymentDate: new Date(currentYear, 4, 20),
      isLocked: true,
      notes: "Sudah disetor ke paroki",
      paymentStatus: "Lunas",
    },
    {
      id: 5,
      familyHeadId: 5,
      year: currentYear,
      amount: 1000000,
      status: "pending",
      paymentDate: new Date(currentYear, 5, 30),
      isLocked: false,
      notes: "Belum bayar",
      paymentStatus: "Belum Lunas",
    }
  ];
}

// Generate mock arrears data
export function generateArrears(): DanaMandiriArrears[] {
  const currentYear = new Date().getFullYear();
  
  return [
    {
      id: 1,
      familyHeadId: 6,
      periods: [currentYear - 1, currentYear],
      totalAmount: 2000000,
      lastNotificationDate: subDays(new Date(), 15),
    },
    {
      id: 2,
      familyHeadId: 7,
      periods: [currentYear],
      totalAmount: 1000000,
      lastNotificationDate: subDays(new Date(), 5),
    },
    {
      id: 3,
      familyHeadId: 8,
      periods: [currentYear - 2, currentYear - 1, currentYear],
      totalAmount: 3000000,
      lastNotificationDate: subDays(new Date(), 2),
    },
    {
      id: 4,
      familyHeadId: 9,
      periods: [currentYear - 1, currentYear],
      totalAmount: 2000000,
    },
    {
      id: 5,
      familyHeadId: 10,
      periods: [currentYear],
      totalAmount: 1000000,
    }
  ];
}

// Calculate summary statistics
export function calculateSummary(transactions: DanaMandiriTransaction[]) {
  const currentYear = new Date().getFullYear();
  const thisYearTxs = transactions.filter(tx => tx.year === currentYear);
  
  const totalCollected = thisYearTxs.reduce((sum, tx) => 
    tx.status === "paid" || tx.status === "submitted" ? sum + tx.amount : sum, 0);
  
  const paidFamilyHeads = new Set(
    thisYearTxs
      .filter(tx => tx.status === "paid" || tx.status === "submitted")
      .map(tx => tx.familyHeadId)
  );
  
  const unpaidCount = familyHeads.length - paidFamilyHeads.size;
  
  return {
    totalCollected,
    paidCount: paidFamilyHeads.size,
    unpaidCount,
  };
}

// Format currency
export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat("id-ID", {
    style: "currency",
    currency: "IDR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}

// Get family head name
export function getFamilyHeadName(id: number): string {
  const head = familyHeads.find(h => h.id === id);
  return head?.name || "Unknown";
}

// Create a new transaction
export function createNewTransaction(values: {
  familyHeadId: number;
  year: number;
  amount: number;
  paymentDate: Date;
  notes?: string;
  paymentStatus?: "Lunas" | "Belum Lunas";
}): DanaMandiriTransaction {
  const paymentStatus = values.paymentStatus || "Lunas";
  
  return {
    id: Math.floor(Math.random() * 10000), // In a real app, this would be generated by the server
    familyHeadId: values.familyHeadId,
    year: values.year,
    amount: values.amount,
    status: paymentStatus === "Belum Lunas" ? "pending" : "paid",
    paymentDate: values.paymentDate,
    isLocked: false,
    notes: values.notes,
    paymentStatus,
  };
}

// Show notification for transaction
export function showTransactionNotification(transaction: DanaMandiriTransaction): void {
  const familyHead = getFamilyHeadName(transaction.familyHeadId);
  toast.success(`Transaksi untuk ${familyHead} berhasil disimpan`);
  
  // Simulate sending real-time notification to all users
  setTimeout(() => {
    toast.info(`Notifikasi: ${familyHead} telah melakukan pembayaran Dana Mandiri tahun ${transaction.year}`);
  }, 2000);
}

// Submit to Paroki
export function submitToParoki(
  transactions: DanaMandiriTransaction[],
  transactionIds: number[]
): DanaMandiriTransaction[] {
  // Update transactions
  const updatedTransactions = transactions.map(tx => 
    transactionIds.includes(tx.id) 
      ? { ...tx, status: "submitted" as "pending" | "paid" | "submitted", isLocked: true } 
      : tx
  );
  
  // Show notification
  toast.success(`${transactionIds.length} transaksi berhasil disetor ke paroki`);
  
  // Simulate real-time notification to all users
  setTimeout(() => {
    toast.info(`Notifikasi: ${transactionIds.length} transaksi Dana Mandiri telah disetor ke paroki`);
  }, 2000);
  
  return updatedTransactions;
}

// Send notification reminder
export function sendReminderNotification(
  familyHeadIds: number[],
  message: string
): void {
  const familyNames = familyHeadIds.map(id => getFamilyHeadName(id)).join(", ");
  
  toast.success(`Notifikasi pengingat dikirim ke ${familyHeadIds.length} kepala keluarga`);
  
  // Simulate notification popup
  setTimeout(() => {
    toast.info(`Pesan pengingat: ${message}`);
    toast.info(`Dikirim kepada: ${familyNames}`);
  }, 1500);
}

// Print PDF
export function printPdf(documentType: string, year?: number, fileFormat: string = "pdf"): void {
  const formattedYear = year ? ` tahun ${year}` : "";
  
  let documentName = "";
  switch (documentType) {
    case "payment_receipt":
      documentName = "Bukti Pembayaran";
      break;
    case "yearly_report":
      documentName = "Laporan Tahunan";
      break;
    case "debt_report":
      documentName = "Laporan Tunggakan";
      break;
    default:
      documentName = "Dokumen";
  }
  
  toast.success(`Mencetak ${documentName}${formattedYear} dalam format PDF`);
} 